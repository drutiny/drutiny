# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  drutiny_config_dir: '%user_home_dir%/.drutiny'
  policy.library.fs: '%drutiny_config_dir%/policy'
  cache.directory: '%drutiny_config_dir%/cache'
  cache.ttl: 3600
  config.local: '%drutiny_config_dir%/config.yml'
  config.credentials: '%drutiny_config_dir%/.credentials.yml'
  config.old_path: '%drutiny_config_dir%/.drutiny_creds.yml'
  log.directory: '%user_home_dir%/.drutiny/logs'
  twig.templates:
    - '%drutiny_core_dir%/twig'
    - '%drutiny_core_dir%/twig/report'
  twig.cache: '%drutiny_config_dir%/twig'
  twig.debug: true
  twig.strict: true
  async.forks: 7
  language_default: en
  progress_bar.template: |
    %%message%%
    %%current%%/%%max%% [%%bar%%] %%percent:3s%%%% %%elapsed:6s%%
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true

    _instanceof:
      # Any symfony commands found can be loaded in as drutiny commands.
      # Drutiny uses the "command" tag to load commands into the Console
      # Application.
      Symfony\Component\Console\Command\Command:
        tags: [command]

      # Drutiny pulls any class tagged as "profile.source" as a source to load
      # profiles from.
      Drutiny\ProfileSource\ProfileSourceInterface:
        tags: [profile.source]

      # Drutiny pulls any class tagged as "policy.source" as a source to load
      # policies from.
      Drutiny\PolicySource\PolicySourceInterface:
        tags: [policy.source]

      # Auto register any plugins.
      Drutiny\Plugin:
        tags: [plugin]

      # Drutiny pulls any class tagged as "format" as a source to load
      # reporting formats from (e.g. json, html, markdown, etc).
      Drutiny\Report\FormatInterface:
        tags: [format]

      Symfony\Component\EventDispatcher\EventSubscriberInterface:
        tags: [drutiny.event_subscriber]

      Drutiny\ExpressionLanguage\Func\ContainerDependentFunctionInterface:
        tags: [drutiny.expression_language.function]

      Drutiny\Http\MiddlewareInterface:
        tags: [http.middleware]

    async:
        shared: false
        class: Async\ForkManager
        calls:
          - [setMaxForks, ['%async.forks%']]

    Async\ForkManager:
      alias: 'async'

    Async\Channel:
      shared: false

    cache.array:
        class: Symfony\Component\Cache\Adapter\ArrayAdapter
        arguments: ['%cache.ttl%']
        calls:
          - [setLogger, ['@logger']]

    cache.chain:
        class: Symfony\Component\Cache\Adapter\ChainAdapter
        arguments: [['@cache.filesystem'], '%cache.ttl%']

    cache.filesystem:
        class: Symfony\Component\Cache\Adapter\FilesystemAdapter
        arguments: [drutiny, '%cache.ttl%', '%cache.directory%']
        calls:
          - [setLogger, ['@logger']]
          - [prune]

    yaml:
      class: Symfony\Component\Yaml\Yaml

    # Parse a local config file to use as config overrides for the local
    # instance of drutiny.
    config:
      class: Drutiny\ConfigFile
      arguments: ['%config.local%']
      # autowire: false

    credentials:
      class: Drutiny\ConfigFile
      arguments: ['%config.credentials%']
      # autowire: false

    # DomainList provider using YAML files.
    # This is manually mentioned to associate the name "yaml" with the
    # DomainListInterface provider.
    domain_list.yaml:
        class: Drutiny\DomainList\DomainListYamlFile
        tags: [domain_list]

    domain.source:
        class: Drutiny\DomainSource

    event_dispatcher:
        class: Symfony\Component\EventDispatcher\EventDispatcher

    expression_language:
      class: Symfony\Component\ExpressionLanguage\ExpressionLanguage
      arguments: [null, ['@Drutiny\ExpressionLanguage\ExpressionFunctionProvider']]
      calls:
        - [addFunction, ['@Drutiny\ExpressionLanguage\Func\ArraySelect']]
        - [addFunction, ['@Drutiny\ExpressionLanguage\Func\Filter']]
        - [addFunction, ['@Drutiny\ExpressionLanguage\Func\SemverGt']]
        - [addFunction, ['@Drutiny\ExpressionLanguage\Func\SemverGte']]
        - [addFunction, ['@expression_language.array_filter']]
        - [addFunction, ['@expression_language.array_key_exists']]
        - [addFunction, ['@expression_language.count']]
        - [addFunction, ['@expression_language.in_array']]

    expression_language.in_array:
      class: Symfony\Component\ExpressionLanguage\ExpressionFunction
      factory: [Symfony\Component\ExpressionLanguage\ExpressionFunction, fromPhp]
      arguments: [in_array]

    expression_language.array_key_exists:
      class: Symfony\Component\ExpressionLanguage\ExpressionFunction
      factory: [Symfony\Component\ExpressionLanguage\ExpressionFunction, fromPhp]
      arguments: [array_key_exists]

    expression_language.count:
      class: Symfony\Component\ExpressionLanguage\ExpressionFunction
      factory: [Symfony\Component\ExpressionLanguage\ExpressionFunction, fromPhp]
      arguments: [count]

    expression_language.array_filter:
      class: Symfony\Component\ExpressionLanguage\ExpressionFunction
      factory: [Symfony\Component\ExpressionLanguage\ExpressionFunction, fromPhp]
      arguments: [array_filter]

    # A factory class for producing a reporting format instance.
    format.factory:
      class: Drutiny\Report\FormatFactory

    # The Drutiny Guzzle HTTP factory.
    http.client:
      shared: false
      class: Drutiny\Http\Client

    # Default logger echoes logs out to the console.
    logger:
      alias: Drutiny\Console\LogFileLogger

    Drutiny\Console\LogFileLogger:
      arguments:
        - '%log.directory%'
        - '@Symfony\Component\Filesystem\Filesystem'

    # Default output class echoes out to the console.
    output:
      class: Symfony\Component\Console\Output\ConsoleOutput
      arguments:
        - '@=service("verbosity").get()'

    input:
      class: Symfony\Component\Console\Input\ArgvInput

    # Factory for loading policies from their sources.
    policy.factory:
      class: 'Drutiny\PolicyFactory'
      arguments: ['@service_container', '@cache.filesystem']

    policy.override:
      class: 'Drutiny\Entity\PolicyOverride'
      shared: false

    profile:
      shared: false
      class: 'Drutiny\Profile'
      factory: ['Drutiny\Profile', create]
    # Factory for loading profiles from their sources.
    profile.factory:
      class: 'Drutiny\ProfileFactory'
      arguments: ['@service_container', '@cache.filesystem']

    target.factory:
      class: Drutiny\Target\TargetFactory

    target:
      class: Drutiny\Target\DrushTarget
      synthetic: true

    target.drush:
      class: Drutiny\Target\DrushTarget

    target.none:
      class: Drutiny\Target\TargetNone

    twig.loader:
      class: Twig\Loader\ChainLoader

    drutiny.templates:
      class: Twig\Loader\FilesystemLoader
      arguments: [ '%twig.templates%' ]
      tags: [twig.loader]

    twig:
      class: Twig\Environment
      arguments:
        - '@twig.loader'
        - cache: '%twig.cache%'
          debug: '%twig.debug%'
          strict_variables: '%twig.strict%'
      calls:
        - [addExtension, ['@Twig\Extension\DebugExtension']]
        - [addExtension, ['@Twig\Extension\StringLoaderExtension']]
        - [addExtension, ['@Twig\Extra\Markdown\MarkdownExtension']]
        - [addExtension, ['@Twig\Extra\String\StringExtension']]
        - [addFilter, ['@twig.filters.array_sum']]
        - [addFilter, ['@twig.filters.sectionHeading']]
        - [addFilter, ['@twig.filters.chart']]
        - [addFunction, ['@twig.functions.policy_result']]
        - [addTest, ['@twig.test.is_numeric']]
        - [addTest, ['@twig.test.keyed']]
        - [addRuntimeLoader, ['@Drutiny\Report\TwigExtraMarkdownRuntimeLoader']]
        - [addGlobal, ['logger', '@logger']]
        - [addGlobal, ['ext', 'md']]

    twig.functions.policy_result:
      class: Twig\TwigFunction
      arguments:
        - policy_result
        - ['Drutiny\Report\Twig\Helper', 'renderAuditReponse']
        - is_safe: [html]
          needs_environment: true

    twig.filters.array_sum:
      class: Twig\TwigFilter
      arguments: ['sum', 'array_sum']

    twig.test.is_numeric:
      class: Twig\TwigTest
      arguments: ['numeric', 'is_numeric']

    twig.test.keyed:
      class: Twig\TwigTest
      arguments: ['keyed', ['Drutiny\Report\Twig\Helper', 'keyed']]

    twig.filters.sectionHeading:
      class: Twig\TwigFilter
      arguments:
        - 'heading'
        - ['Drutiny\Report\Twig\Helper', 'filterSectionHeading']
        - needs_environment: true
          is_safe: ['html']

    twig.filters.chart:
      class: Twig\TwigFilter
      arguments:
        - 'chart'
        - ['Drutiny\Report\Format\HTML', 'filterChart']
        - is_safe: ['html']

    process.manager:
      class: Drutiny\Process\ProcessManager

    verbosity:
      class: Drutiny\Console\Verbosity

    language_manager:
      class: Drutiny\LanguageManager

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Drutiny\:
        resource: 'src/*'
        exclude:
          - 'src/{ExpressionFunction,DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
          - src/Console/{Application.php}
          - src/Report/Backport/*
          - src/Console/{LogFileLogger.php}
          - src/Event/*
          - src/Upgrade/*
          - src/*/*{Exception.php}
          - src/Sandbox/{Sandbox.php}
          - src/{ExpressionLanguage.php}
          - src/Report/Format/Menu/*
          - src/{functions.php}

    Drutiny\Target\Service\ExecutionInterface:
      alias: 'Drutiny\Target\Service\LocalService'

    Drutiny\Entity\DataBag:
      shared: false

    Drutiny\Entity\EventDispatchedDataBag:
      shared: false

    Drutiny\ConfigFile:
      alias: config

    Drutiny\Target\TargetInterface:
      alias: 'target'

    Drutiny\Assessment:
      shared: false

    assessment:
      alias: Drutiny\Assessment

    Symfony\Contracts\Cache\CacheInterface:
      alias: 'cache.filesystem'

    Symfony\Component\Console\Output\OutputInterface:
      alias: output

    Symfony\Component\Console\Input\InputInterface:
      alias: input

    Symfony\Component\Cache\Adapter\FilesystemAdapter:
      alias: cache.filesystem

    finder:
      class: Symfony\Component\Finder\Finder
      shared: false

    Symfony\Component\Finder\Finder:
      alias: finder

    Symfony\Component\Console\Output\ConsoleOutputInterface:
      alias: Symfony\Component\Console\Output\ConsoleOutput

    progress_bar:
      alias: Symfony\Component\Console\Helper\ProgressBar

    Symfony\Component\Console\Helper\ProgressBar:
      calls:
        - [setEmptyBarCharacter, ['░']]
        - [setProgressCharacter, ['']]
        - [setBarCharacter, ['▓']]
        - [setFormatDefinition, ['drutiny', '%progress_bar.template%']]
        - [setFormat, ['drutiny']]

    Symfony\Component\Console\Style\SymfonyStyle:

    style:
      alias: Symfony\Component\Console\Style\SymfonyStyle

    Symfony\Component\EventDispatcher\EventDispatcher:
      alias: event_dispatcher

    Symfony\Component\ExpressionLanguage\ExpressionLanguage:
      alias: expression_language

    Symfony\Component\Filesystem\Filesystem:

    Psr\Log\LoggerInterface:
      alias: logger

    Twig\Environment:
      alias: 'twig'

    Twig\Extension\DebugExtension:
    Twig\Extension\StringLoaderExtension:
    Twig\Extra\Markdown\MarkdownExtension:
    Twig\Extra\Markdown\MarkdownInterface:
    Twig\Extra\Markdown\MarkdownRuntime:
    Twig\Extra\String\StringExtension:
    Symfony\Component\Console\Output\ConsoleOutput:
