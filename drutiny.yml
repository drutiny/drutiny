# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  name: Drutiny
  drutiny_config_dir: '%user_home_dir%/.drutiny'
  # Where phar release files will be extracted too.
  drutiny_releases_dir: '%drutiny_config_dir%/releases'
  drutiny_release_bin: '%drutiny_config_dir%/bin/drutiny'
  policy.library.fs: '%drutiny_config_dir%/policy'
  policy.sources.fs: '%drutiny_config_dir%/sources/policy'
  profile.sources.fs: '%drutiny_config_dir%/sources/profile'
  profile.library.fs: '%drutiny_config_dir%/profile'
  sources.ttl: 2592000
  cache.directory: '%drutiny_config_dir%/cache'
  cache.ttl: 3600
  cache.namespace: 'drutiny-%instance_id%'
  config.local: '%drutiny_config_dir%/config.yml'
  config.credentials: '%drutiny_config_dir%/.credentials.yml'
  state.filepath: '%drutiny_config_dir%/state.yml'
  config.old_path: '%drutiny_config_dir%/.drutiny_creds.yml'
  log.directory: '%drutiny_config_dir%/logs'
  log.name: drutiny
  log.filepath: '%log.directory%/%log.name%.log'
  log.level: WARNING
  log.format: "[%%datetime%%][pid:%%extra.process_id%% %%extra.memory_usage%%] %%channel%%.%%level_name%%: %%message%%\n"
  log.max_files: 3
  twig.templates:
    - '%drutiny_core_dir%/twig'
    - '%drutiny_core_dir%/twig/report'
  twig.cache: '%drutiny_config_dir%/twig'
  twig.debug: true
  twig.strict: false
  async.forks: 7
  async.timeout: 3600
  # Change this to false if you want to disable asynchronous forking.
  async.enabled: true
  language_default: en
  progress_bar.template: |
    %%message%%
    %%current%%/%%max%% [%%bar%%] %%percent:3s%%%% %%elapsed:6s%%
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true
        bind:
          $name: '%name%'
          $version: '%version%'
    _instanceof:
        
      # Any symfony commands found can be loaded in as drutiny commands.
      # Drutiny uses the "command" tag to load commands into the Console
      # Application.
      Symfony\Component\Console\Command\Command:
        tags: [command]

      Drutiny\Target\Service\ServiceInterface:
        tags: [service]

      # See Drutiny\DependencyInjection\AddTargetPass
      Drutiny\Target\TargetInterface:
        tags: [target]

      # Auto register any plugins.
      Drutiny\Plugin:
        tags: [plugin]

      # Drutiny pulls any class tagged as "format" as a source to load
      # reporting formats from (e.g. json, html, markdown, etc).
      Drutiny\Report\FormatInterface:
        tags: [format]

      Symfony\Component\EventDispatcher\EventSubscriberInterface:
        tags: [kernel.event_subscriber]

      Drutiny\Http\MiddlewareInterface:
        tags: [http.middleware]

      Drutiny\DomainList\DomainListInterface:
        tags: [domain_list]

      Drutiny\Report\FilesystemFormatInterface:
        shared: false


    # Services
    Psr\Container\ContainerInterface:
      alias: service_container
    Symfony\Component\DependencyInjection\ContainerInterface:
      alias: service_container

    Symfony\Component\DependencyInjection\ContainerBuilder:
      alias: service_container
    
    Symfony\Component\DependencyInjection\Container:
      alias: service_container
    
    Symfony\Component\DependencyInjection\TaggedContainerInterface:
      alias: service_container
    
    Async\ForkManager:
      shared: false
      class: Async\ForkManager
      calls:
          - [setMaxForks, ['%async.forks%']]
          - [setWaitTimeout, ['%async.timeout%']]
          - [setAsync, ['%async.enabled%']]

    cache.filesystem:
      tags: ['cache']
      class: Symfony\Component\Cache\Adapter\FilesystemAdapter
      arguments: ['%cache.namespace%', '%cache.ttl%', '%cache.directory%']
      calls:
        - [setLogger, ['@logger']]
        - [prune]

    cache:
      alias: cache.filesystem

    policy.store:
      tags: ['source.cache']
      class: Symfony\Component\Cache\Adapter\FilesystemAdapter
      arguments: ['policy.store', '%sources.ttl%', '%policy.sources.fs%']
      calls:
        - [setLogger, ['@logger']]
        - [prune]

    profile.store:
      tags: ['source.cache']
      class: Symfony\Component\Cache\Adapter\FilesystemAdapter
      arguments: ['profile.store', '%sources.ttl%', '%profile.sources.fs%']
      calls:
        - [setLogger, ['@logger']]
        - [prune]

    cache.global:
      tags: ['cache']
      class: Symfony\Component\Cache\Adapter\FilesystemAdapter
      arguments: [drutiny, '%cache.ttl%', '%cache.directory%']
      calls:
        - [setLogger, ['@logger']]
        - [prune]

    yaml:
      class: Symfony\Component\Yaml\Yaml

    # Parse a local config file to use as config overrides for the local
    # instance of drutiny.
    config:
      class: Drutiny\Config\ConfigFile
      arguments: ['%config.local%']

    credentials:
      class: Drutiny\Config\ConfigFile
      arguments: ['%config.credentials%']

    state:
      class: Drutiny\Config\ConfigFile
      arguments: ['%state.filepath%']

    # This is just to fool the autoloader. It is always overridden by compiler passes.
    Drutiny\Config\ConfigInterface:
      alias: 'config'

    # DomainList provider using YAML files.
    # This is manually mentioned to associate the name "yaml" with the
    # DomainListInterface provider.
    Drutiny\DomainList\DomainListYamlFile:
        tags: [domain_list]

    event_dispatcher:
        class: Symfony\Component\EventDispatcher\EventDispatcher

    Drutiny\Console\Application:
      calls:
        - [setDispatcher, ['@event_dispatcher']]

    Drutiny\Audit\TwigEvaluator:
    Drutiny\Audit\SyntaxProcessor:
    Drutiny\Event\EventSubscriber:

    # A factory class for producing a reporting format instance.
    Drutiny\Report\FormatFactory:

    # The Drutiny Guzzle HTTP factory.
    http.client:
      shared: false
      class: Drutiny\Http\Client

    # Default logger echoes logs out to the console.
    logger:
      class: Monolog\Logger
      arguments:
        - '%log.name%'
      calls:
        - [pushProcessor, ['@Monolog\Processor\MemoryUsageProcessor']]
        - [pushProcessor, ['@Monolog\Processor\ProcessIdProcessor']]
        - [pushProcessor, ['@Monolog\Processor\PsrLogMessageProcessor']]
        - [pushHandler, ['@logger.logfile']]
        - [pushHandler, ['@Drutiny\Console\Helper\MonologProgressBarHandler']]

    logger.logfile:
      class: Monolog\Handler\RotatingFileHandler
      calls:
        - [setFormatter,['@Monolog\Formatter\LineFormatter']]
        - [setLevel, ['%log.level%']]
      arguments:
        - '%log.filepath%'
        - '%log.max_files%'

    Monolog\Handler\StreamHandler:
      alias: logger.logfile

    Monolog\Processor\ProcessIdProcessor:
    Monolog\Processor\MemoryUsageProcessor:
    Monolog\Processor\PsrLogMessageProcessor:

    Monolog\Formatter\LineFormatter:
      arguments:
        - '%log.format%'
        - null
        - true

    input:
      class: Symfony\Component\Console\Input\ArgvInput

    # Factory for loading policies from their sources.
    policy.factory:
      class: 'Drutiny\PolicyFactory'

    # Factory for loading profiles from their sources.
    profile.factory:
      class: 'Drutiny\ProfileFactory'
      arguments: ['@service_container', '@cache.filesystem']

    twig.loader:
      class: Twig\Loader\ChainLoader

    drutiny.templates:
      class: Twig\Loader\FilesystemLoader
      arguments: [ '%twig.templates%' ]
      tags: [twig.loader]

    twig:
      class: Twig\Environment
      arguments:
        - '@twig.loader'
        - cache: '%twig.cache%'
          debug: '%twig.debug%'
          strict_variables: '%twig.strict%'
      calls:
        - [addExtension, ['@Twig\Extension\DebugExtension']]
        - [addExtension, ['@Twig\Extension\StringLoaderExtension']]
        - [addExtension, ['@Twig\Extra\Markdown\MarkdownExtension']]
        - [addExtension, ['@Twig\Extra\String\StringExtension']]
        - [addFilter, ['@twig.filters.array_sum']]
        - [addFilter, ['@twig.filters.array_unique']]
        - [addFilter, ['@twig.filters.array_values']]
        - [addFilter, ['@twig.filters.json_decode']]
        - [addFilter, ['@twig.filters.sectionHeading']]
        - [addFilter, ['@twig.filters.chart']]
        - [addFilter, ['@twig.filters.array_merge']]
        - [addFilter, ['@twig.filters.format_bytes']]
        - [addFilter, ['@twig.filters.yaml_dump']]
        - [addFunction, ['@twig.functions.policy_result']]
        - [addFunction, ['@twig.functions.semver_satisfies']]
        - [addFunction, ['@twig.functions.explode']]
        - [addTest, ['@twig.test.is_numeric']]
        - [addTest, ['@twig.test.keyed']]
        - [addRuntimeLoader, ['@Drutiny\Report\TwigExtraMarkdownRuntimeLoader']]
        - [addGlobal, ['logger', '@logger']]
        - [addGlobal, ['ext', 'md']]

    Twig\Environment:
      alias: twig

    twig.functions.policy_result:
      class: Twig\TwigFunction
      arguments:
        - policy_result
        - ['Drutiny\Report\Twig\Helper', 'renderAuditReponse']
        - is_safe: [html]
          needs_environment: true

    twig.functions.parse_url:
      class: Twig\TwigFunction
      arguments:
        - parse_url
        - parse_url

    twig.functions.semver_satisfies:
      class: Twig\TwigFunction
      arguments:
        - semver_satisfies
        - ['Composer\Semver\Semver', 'satisfies']
        - is_safe: [html]

    twig.functions.explode:
      class: Twig\TwigFunction
      arguments:
        - explode
        - explode

    twig.filters.array_sum:
      class: Twig\TwigFilter
      arguments: ['sum', 'array_sum']

    twig.filters.array_values:
      class: Twig\TwigFilter
      arguments: ['values', 'array_values']

    twig.filters.array_merge:
      class: Twig\TwigFilter
      arguments: ['array_merge', 'array_merge']

    twig.filters.array_unique:
      class: Twig\TwigFilter
      arguments: ['unique', 'array_unique']

    twig.filters.json_decode:
      class: Twig\TwigFilter
      arguments: ['json_decode', 'json_decode']

    twig.test.is_numeric:
      class: Twig\TwigTest
      arguments: ['numeric', 'is_numeric']

    twig.test.keyed:
      class: Twig\TwigTest
      arguments: ['keyed', ['Drutiny\Report\Twig\Helper', 'keyed']]

    twig.filters.format_bytes:
      class: Twig\TwigFilter
      arguments:
        - 'format_bytes'
        - ['Drutiny\Report\Twig\Helper', 'formatBytes']

    twig.filters.sectionHeading:
      class: Twig\TwigFilter
      arguments:
        - 'heading'
        - ['Drutiny\Report\Twig\Helper', 'filterSectionHeading']
        - needs_environment: true
          is_safe: ['html']

    twig.filters.yaml_dump:
      class: Twig\TwigFilter
      arguments:
        - yaml_dump
        - ['Symfony\Component\Yaml\Yaml', 'dump']
        - is_safe: ['html']

    twig.filters.chart:
      class: Twig\TwigFilter
      arguments:
        - 'chart'
        - ['Drutiny\Report\Twig\Helper', 'filterChart']
        - is_safe: ['html']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Drutiny\:
        resource: 'src/*'
        exclude:
          - 'src/{ExpressionFunction,DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
          # Exclude audit classes from dependency injection. See Drutiny\AuditFactory.
          - src/Audit/*
          - src/Http/Audit/*
          - src/Plugin/Drupal7/Audit/*
          - src/Plugin/Drupal8/Audit/*
          - src/Policy.php
          - src/Profile.php
          - src/Config/Config.*
          - src/Report/Backport/*
          - src/Event/*
          - src/Upgrade/*
          - src/*/*{Exception.php}
          - src/Sandbox/{Sandbox.php}
          - src/Report/Format/Menu/*
          - src/functions.php

    Drutiny\Entity\DataBag:
      shared: false

    Drutiny\Config\ConfigFile:
      alias: config

    Drutiny\Assessment:
      shared: false

    assessment:
      alias: Drutiny\Assessment

    Symfony\Contracts\Cache\CacheInterface:
      alias: 'cache.filesystem'

    Symfony\Component\Console\Output\OutputInterface:
      alias: Symfony\Component\Console\Output\ConsoleOutput

    Symfony\Component\Console\Input\InputInterface:
      alias: input

    Symfony\Component\Cache\Adapter\FilesystemAdapter:
      alias: cache.filesystem

    finder:
      class: Symfony\Component\Finder\Finder
      shared: false

    Symfony\Component\Finder\Finder:
      alias: finder

    Symfony\Component\Console\Output\ConsoleOutputInterface:
      alias: Symfony\Component\Console\Output\ConsoleOutput

    progress_bar:
      alias: Symfony\Component\Console\Helper\ProgressBar

    Symfony\Component\Console\Helper\ProgressBar:
      calls:
        - [setEmptyBarCharacter, ['░']]
        - [setProgressCharacter, ['']]
        - [setBarCharacter, ['▓']]
        - [setFormatDefinition, ['drutiny', '%progress_bar.template%']]
        - [setFormat, ['drutiny']]
        - [setMessage, ['%progress_bar.loading_message%']]

    Symfony\Component\Console\Style\SymfonyStyle:
    Symfony\Component\Console\Terminal:

    style:
      alias: Symfony\Component\Console\Style\SymfonyStyle

    Symfony\Component\EventDispatcher\EventDispatcher:
      alias: event_dispatcher

    Symfony\Component\Filesystem\Filesystem:

    Psr\Log\LoggerInterface:
      alias: logger

    Twig\Extension\DebugExtension:
    Twig\Extension\StringLoaderExtension:
    Twig\Extra\Markdown\MarkdownExtension:
    Twig\Extra\Markdown\MarkdownInterface:
    Twig\Extra\Markdown\MarkdownRuntime:
    Twig\Extra\String\StringExtension:
    Symfony\Component\Console\Output\ConsoleOutput:
