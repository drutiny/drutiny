<?php

namespace Drutiny\Config;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class PolicyConfiguration implements ConfigurationInterface
{
    public function getConfigTreeBuilder()
    {
        $treeBuilder = new TreeBuilder('policy');
        $treeBuilder->getRootNode()
          ->children()
            ->scalarNode('title')
              ->info('The human readable name of the policy.')
              ->isRequired()
              ->cannotBeEmpty()
              ->end()
            ->scalarNode('name')
              ->info('The machine-name of the policy.')
              ->isRequired()
              ->cannotBeEmpty()
              ->end()
            ->scalarNode('class')
              ->info('A PHP Audit class to pass the policy to be assessed.')
              ->isRequired()
              ->cannotBeEmpty()
              ->end()
            ->scalarNode('description')
              ->info('A description why the policy is valuable.')
              ->isRequired()
              ->cannotBeEmpty()
              ->end()
            ->scalarNode('language')
              ->defaultValue('en')
              ->info('Language code')
              ->end()

            // Classification
            ->enumNode('type')
              ->info('What type of policy this is. Audit types return a pass/fail result while data types return only data.')
              ->values(['audit', 'data'])
              ->defaultValue('audit')
              ->end()
            ->arrayNode('tags')
              ->info('A set of tags to categorize a policy.')
              ->scalarPrototype()->end()
              ->end()
            ->enumNode('severity')
              ->info('What severity level the policy is rated at.')
              ->values(['low', 'normal', 'high', 'critical'])
              ->defaultValue('normal')
              ->treatNullLike('normal')
              ->end()

            // Working variables.
            ->arrayNode('parameters')
              ->info('Parameters are values that maybe used to configure an audit for use with the Policy.')
              ->variablePrototype()->end()
              ->end()

            // Twig expressions to evaluate parameters.
            ->arrayNode('build_parameters')
              ->info('Create parameters to pass to the audit before it is executed. Target object is available.')
              ->variablePrototype()->end()
              ->end()

            // Messaging
            ->scalarNode('remediation')
              ->info('Content to communicate how to remediate a policy failure.')
              ->defaultValue('')
              ->end()
            ->scalarNode('failure')
              ->info('Content to communicate a policy failure.')
              ->defaultValue('')
              ->isRequired()
              ->end()
            ->scalarNode('success')
              ->info('Content to communicate a policy success.')
              ->defaultValue('')
              ->isRequired()
              ->end()
            ->scalarNode('warning')
              ->info('Content to communicate a policy warning (in a success).')
              ->defaultValue('')
              ->end()

            // Configuration
            ->scalarNode('uuid')
              ->info('Unique identifier such as a URL.')
              ->isRequired()
              ->cannotBeEmpty()
              ->end()
            ->scalarNode('source')
              ->info('Where the policy is sourced from.')
              ->end()
            ->integerNode('weight')
              ->info('Weight of a policy to sort it amoung other policies.')
              ->defaultValue(0)
              ->end()
            ->arrayNode('depends')
              ->info('A list of other policies that this policy depends on.')
                ->arrayPrototype()
                  ->children()
                    ->scalarNode('description')
                    ->defaultValue('')
                    ->end()
                    ->enumNode('syntax')
                      ->values(['expression_language', 'twig'])
                      ->defaultValue('expression_language')
                      ->end()
                    ->enumNode('on_fail')
                      ->values(['fail', 'omit', 'error', 'report_only'])
                      ->defaultValue('report_only')
                      ->end()
                    ->scalarNode('expression')
                      ->isRequired()
                      ->end()
                  ->end()
                ->end()
              ->end()
            ->arrayNode('compatibility')
              ->info('A list of checks to check for compatitbility with assessable target.')
              ->end()
            ->arrayNode('chart')
              ->info('Configuration for any charts used in the policy messaging.')
                ->arrayPrototype()
                  ->normalizeKeys(false)
                  ->children()
                    ->scalarNode('title')->end()
                    ->scalarNode('html-class')->end()
                    ->integerNode('table-index')->end()
                    ->enumNode('type')
                      ->values(['bar', 'horizontalBar', 'line', 'pie', 'doughnut'])
                      ->defaultValue('bar')
                      ->end()
                    ->booleanNode('hide-table')->defaultValue(false)->end()
                    ->booleanNode('stacked')->defaultValue(false)->end()
                    ->arrayNode('series')
                      ->scalarPrototype()->end()
                      ->end()
                    ->arrayNode('series-labels')
                      ->scalarPrototype()->end()
                      ->end()
                    ->arrayNode('colors')
                      ->scalarPrototype()->end()
                      ->end()
                    ->variableNode('labels')->end()
                    ->scalarNode('height')->end()
                    ->scalarNode('width')->end()
                    ->scalarNode('y-axis')->end()
                    ->scalarNode('x-axis')->end()
                    ->enumNode('legend')
                      ->values(['top', 'bottom', 'left', 'right', 'none'])
                      ->defaultValue('right')
                      ->end()
                    ->integerNode('bootstrap-columns')->end()
                  ->end()
                ->end()
              ->end();

        return $treeBuilder;
    }
}
